syntax = "proto3";
package metabelarus.mbcorecr.crsign;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "crsign/auth.proto";
import "crsign/record.proto";

option go_package = "github.com/metabelarus/mbcorecr/x/crsign/types";

// Query defines the gRPC querier service.
service Query {
	rpc Auth(QueryGetAuthRequest) returns (QueryGetAuthResponse) {
		option (google.api.http).get = "/metabelarus/mbcorecr/crsign/auths/{id}";
	}

	rpc Id2Service(QueryGetId2ServiceRequest) returns (QueryGetId2ServiceResponse) {
		option (google.api.http).get = "/metabelarus/mbcorecr/crsign/id2services/{id}";
	}

	rpc Record(QueryGetRecordRequest) returns (QueryGetRecordResponse) {
		option (google.api.http).get = "/metabelarus/mbcorecr/crsign/records/{id}";
	}

	rpc Id2Record(QueryGetId2RecordRequest) returns (QueryGetId2RecordResponse) {
		option (google.api.http).get = "/metabelarus/mbcorecr/crsign/id2record/{id}";
	}
}


message QueryGetAuthRequest {
	string id = 1;
}

message QueryGetAuthResponse {
	Auth Auth = 1;
}

message QueryGetId2ServiceRequest {
	string id = 1;
}

message QueryGetId2ServiceResponse {
	Id2Service Id2Service = 1;
}

message QueryGetRecordRequest {
	string id = 1;
}

message QueryGetRecordResponse {
	Record Record = 1;
}

message QueryGetId2RecordRequest {
	string id = 1;
}

message QueryGetId2RecordResponse {
	Id2Record Id2Record = 1;
}
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crsign/signatureList.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignatureList struct {
	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RootSignatureId string `protobuf:"bytes,2,opt,name=rootSignatureId,proto3" json:"rootSignatureId,omitempty"`
	LastSignatureId string `protobuf:"bytes,3,opt,name=lastSignatureId,proto3" json:"lastSignatureId,omitempty"`
	NextSignatureId string `protobuf:"bytes,4,opt,name=nextSignatureId,proto3" json:"nextSignatureId,omitempty"`
	Metadata        string `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SignatureList) Reset()         { *m = SignatureList{} }
func (m *SignatureList) String() string { return proto.CompactTextString(m) }
func (*SignatureList) ProtoMessage()    {}
func (*SignatureList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8cb0e67f4a144de, []int{0}
}
func (m *SignatureList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureList.Merge(m, src)
}
func (m *SignatureList) XXX_Size() int {
	return m.Size()
}
func (m *SignatureList) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureList.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureList proto.InternalMessageInfo

func (m *SignatureList) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SignatureList) GetRootSignatureId() string {
	if m != nil {
		return m.RootSignatureId
	}
	return ""
}

func (m *SignatureList) GetLastSignatureId() string {
	if m != nil {
		return m.LastSignatureId
	}
	return ""
}

func (m *SignatureList) GetNextSignatureId() string {
	if m != nil {
		return m.NextSignatureId
	}
	return ""
}

func (m *SignatureList) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type MsgCreateSignatureList struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RootSignatureId string `protobuf:"bytes,2,opt,name=rootSignatureId,proto3" json:"rootSignatureId,omitempty"`
}

func (m *MsgCreateSignatureList) Reset()         { *m = MsgCreateSignatureList{} }
func (m *MsgCreateSignatureList) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSignatureList) ProtoMessage()    {}
func (*MsgCreateSignatureList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8cb0e67f4a144de, []int{1}
}
func (m *MsgCreateSignatureList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSignatureList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSignatureList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSignatureList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSignatureList.Merge(m, src)
}
func (m *MsgCreateSignatureList) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSignatureList) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSignatureList.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSignatureList proto.InternalMessageInfo

func (m *MsgCreateSignatureList) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSignatureList) GetRootSignatureId() string {
	if m != nil {
		return m.RootSignatureId
	}
	return ""
}

type MsgUpdateSignatureList struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id              string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	RootSignatureId string `protobuf:"bytes,3,opt,name=rootSignatureId,proto3" json:"rootSignatureId,omitempty"`
	LastSignatureId string `protobuf:"bytes,4,opt,name=lastSignatureId,proto3" json:"lastSignatureId,omitempty"`
	NextSignatureId string `protobuf:"bytes,5,opt,name=nextSignatureId,proto3" json:"nextSignatureId,omitempty"`
	Metadata        string `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgUpdateSignatureList) Reset()         { *m = MsgUpdateSignatureList{} }
func (m *MsgUpdateSignatureList) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSignatureList) ProtoMessage()    {}
func (*MsgUpdateSignatureList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8cb0e67f4a144de, []int{2}
}
func (m *MsgUpdateSignatureList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSignatureList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSignatureList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSignatureList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSignatureList.Merge(m, src)
}
func (m *MsgUpdateSignatureList) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSignatureList) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSignatureList.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSignatureList proto.InternalMessageInfo

func (m *MsgUpdateSignatureList) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateSignatureList) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgUpdateSignatureList) GetRootSignatureId() string {
	if m != nil {
		return m.RootSignatureId
	}
	return ""
}

func (m *MsgUpdateSignatureList) GetLastSignatureId() string {
	if m != nil {
		return m.LastSignatureId
	}
	return ""
}

func (m *MsgUpdateSignatureList) GetNextSignatureId() string {
	if m != nil {
		return m.NextSignatureId
	}
	return ""
}

func (m *MsgUpdateSignatureList) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func init() {
	proto.RegisterType((*SignatureList)(nil), "metabelarus.mbcorecr.crsign.SignatureList")
	proto.RegisterType((*MsgCreateSignatureList)(nil), "metabelarus.mbcorecr.crsign.MsgCreateSignatureList")
	proto.RegisterType((*MsgUpdateSignatureList)(nil), "metabelarus.mbcorecr.crsign.MsgUpdateSignatureList")
}

func init() { proto.RegisterFile("crsign/signatureList.proto", fileDescriptor_d8cb0e67f4a144de) }

var fileDescriptor_d8cb0e67f4a144de = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x2e, 0x2a, 0xce,
	0x4c, 0xcf, 0xd3, 0x07, 0x11, 0x89, 0x25, 0xa5, 0x45, 0xa9, 0x3e, 0x99, 0xc5, 0x25, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0xd2, 0xb9, 0xa9, 0x25, 0x89, 0x49, 0xa9, 0x39, 0x89, 0x45, 0xa5,
	0xc5, 0x7a, 0xb9, 0x49, 0xc9, 0xf9, 0x45, 0xa9, 0xc9, 0x45, 0x7a, 0x10, 0x0d, 0x52, 0x22, 0xe9,
	0xf9, 0xe9, 0xf9, 0x60, 0x75, 0xfa, 0x20, 0x16, 0x44, 0x8b, 0xd2, 0x4e, 0x46, 0x2e, 0xde, 0x60,
	0x64, 0xa3, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98,
	0x32, 0x53, 0x84, 0x34, 0xb8, 0xf8, 0x8b, 0xf2, 0xf3, 0x4b, 0xe0, 0x8a, 0x3c, 0x53, 0x24, 0x98,
	0xc0, 0x92, 0xe8, 0xc2, 0x20, 0x95, 0x39, 0x89, 0xc5, 0x28, 0x2a, 0x99, 0x21, 0x2a, 0xd1, 0x84,
	0x41, 0x2a, 0xf3, 0x52, 0x2b, 0x50, 0x54, 0xb2, 0x40, 0x54, 0xa2, 0x09, 0x0b, 0x49, 0x71, 0x71,
	0x80, 0x3c, 0x95, 0x92, 0x58, 0x92, 0x28, 0xc1, 0x0a, 0x56, 0x02, 0xe7, 0x2b, 0xc5, 0x70, 0x89,
	0xf9, 0x16, 0xa7, 0x3b, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0xa2, 0xfa, 0x41, 0x82, 0x8b, 0x3d, 0x19,
	0x24, 0x9c, 0x5f, 0x04, 0xf5, 0x08, 0x8c, 0x4b, 0xbc, 0x6f, 0x94, 0xee, 0x30, 0x82, 0x8d, 0x0f,
	0x2d, 0x48, 0x21, 0xc1, 0x78, 0x48, 0xe0, 0x31, 0xe1, 0x0b, 0x3c, 0x66, 0xa2, 0x03, 0x8f, 0x85,
	0xe8, 0xc0, 0x63, 0x25, 0x1c, 0x78, 0x6c, 0xa8, 0x81, 0xe7, 0xe4, 0x71, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x7a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0x48, 0x09, 0x4a, 0x1f, 0x96, 0xa0, 0xf4, 0x2b, 0xf4, 0xa1, 0x69, 0xb0, 0xa4, 0xb2,
	0x20, 0xb5, 0x38, 0x89, 0x0d, 0x9c, 0x92, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x57,
	0x26, 0xa2, 0x9a, 0x02, 0x00, 0x00,
}

func (m *SignatureList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NextSignatureId) > 0 {
		i -= len(m.NextSignatureId)
		copy(dAtA[i:], m.NextSignatureId)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.NextSignatureId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastSignatureId) > 0 {
		i -= len(m.LastSignatureId)
		copy(dAtA[i:], m.LastSignatureId)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.LastSignatureId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RootSignatureId) > 0 {
		i -= len(m.RootSignatureId)
		copy(dAtA[i:], m.RootSignatureId)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.RootSignatureId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSignatureList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSignatureList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSignatureList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootSignatureId) > 0 {
		i -= len(m.RootSignatureId)
		copy(dAtA[i:], m.RootSignatureId)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.RootSignatureId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSignatureList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSignatureList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSignatureList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NextSignatureId) > 0 {
		i -= len(m.NextSignatureId)
		copy(dAtA[i:], m.NextSignatureId)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.NextSignatureId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastSignatureId) > 0 {
		i -= len(m.LastSignatureId)
		copy(dAtA[i:], m.LastSignatureId)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.LastSignatureId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RootSignatureId) > 0 {
		i -= len(m.RootSignatureId)
		copy(dAtA[i:], m.RootSignatureId)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.RootSignatureId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSignatureList(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignatureList(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignatureList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignatureList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.RootSignatureId)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.LastSignatureId)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.NextSignatureId)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	return n
}

func (m *MsgCreateSignatureList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.RootSignatureId)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	return n
}

func (m *MsgUpdateSignatureList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.RootSignatureId)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.LastSignatureId)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.NextSignatureId)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovSignatureList(uint64(l))
	}
	return n
}

func sovSignatureList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignatureList(x uint64) (n int) {
	return sovSignatureList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignatureList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootSignatureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootSignatureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignatureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSignatureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSignatureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextSignatureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignatureList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignatureList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSignatureList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSignatureList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSignatureList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootSignatureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootSignatureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignatureList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignatureList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSignatureList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSignatureList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSignatureList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootSignatureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootSignatureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignatureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSignatureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSignatureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextSignatureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignatureList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignatureList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignatureList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignatureList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatureList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignatureList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignatureList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignatureList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignatureList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignatureList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignatureList = fmt.Errorf("proto: unexpected end of group")
)

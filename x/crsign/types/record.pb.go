// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crsign/record.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecordType int32

const (
	RecordType_IDENTITY_RECORD           RecordType = 0
	RecordType_IDENTITY_PERMANENT_RECORD RecordType = 1
	RecordType_IDENTITY_MUTUAL_RECORD    RecordType = 2
	RecordType_PROVIDER_RECORD           RecordType = 3
	RecordType_PROVIDER_SIGNABLE_RECORD  RecordType = 4
	RecordType_PROVIDER_MUTUAL_RECORD    RecordType = 5
	RecordType_PROVIDER_PERMISSION       RecordType = 6
)

var RecordType_name = map[int32]string{
	0: "IDENTITY_RECORD",
	1: "IDENTITY_PERMANENT_RECORD",
	2: "IDENTITY_MUTUAL_RECORD",
	3: "PROVIDER_RECORD",
	4: "PROVIDER_SIGNABLE_RECORD",
	5: "PROVIDER_MUTUAL_RECORD",
	6: "PROVIDER_PERMISSION",
}

var RecordType_value = map[string]int32{
	"IDENTITY_RECORD":           0,
	"IDENTITY_PERMANENT_RECORD": 1,
	"IDENTITY_MUTUAL_RECORD":    2,
	"PROVIDER_RECORD":           3,
	"PROVIDER_SIGNABLE_RECORD":  4,
	"PROVIDER_MUTUAL_RECORD":    5,
	"PROVIDER_PERMISSION":       6,
}

func (x RecordType) String() string {
	return proto.EnumName(RecordType_name, int32(x))
}

func (RecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{0}
}

type RecordUpdate int32

const (
	RecordUpdate_RECORD_UPDATE_SIGN     RecordUpdate = 0
	RecordUpdate_RECORD_UPDATE_STORE    RecordUpdate = 1
	RecordUpdate_REOCRD_UPDATE_EXTEND   RecordUpdate = 2
	RecordUpdate_REOCRD_UPDATE_REJECT   RecordUpdate = 3
	RecordUpdate_REOCRD_UPDATE_WITHDRAW RecordUpdate = 4
	RecordUpdate_REOCRD_UPDATE_SEAL     RecordUpdate = 5
	RecordUpdate_REOCRD_UPDATE_REOPEN   RecordUpdate = 6
)

var RecordUpdate_name = map[int32]string{
	0: "RECORD_UPDATE_SIGN",
	1: "RECORD_UPDATE_STORE",
	2: "REOCRD_UPDATE_EXTEND",
	3: "REOCRD_UPDATE_REJECT",
	4: "REOCRD_UPDATE_WITHDRAW",
	5: "REOCRD_UPDATE_SEAL",
	6: "REOCRD_UPDATE_REOPEN",
}

var RecordUpdate_value = map[string]int32{
	"RECORD_UPDATE_SIGN":     0,
	"RECORD_UPDATE_STORE":    1,
	"REOCRD_UPDATE_EXTEND":   2,
	"REOCRD_UPDATE_REJECT":   3,
	"REOCRD_UPDATE_WITHDRAW": 4,
	"REOCRD_UPDATE_SEAL":     5,
	"REOCRD_UPDATE_REOPEN":   6,
}

func (x RecordUpdate) String() string {
	return proto.EnumName(RecordUpdate_name, int32(x))
}

func (RecordUpdate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{1}
}

type PublicityType int32

const (
	PublicityType_PRIVATE   PublicityType = 0
	PublicityType_PUBLIC    PublicityType = 1
	PublicityType_ANONYMOUS PublicityType = 2
)

var PublicityType_name = map[int32]string{
	0: "PRIVATE",
	1: "PUBLIC",
	2: "ANONYMOUS",
}

var PublicityType_value = map[string]int32{
	"PRIVATE":   0,
	"PUBLIC":    1,
	"ANONYMOUS": 2,
}

func (x PublicityType) String() string {
	return proto.EnumName(PublicityType_name, int32(x))
}

func (PublicityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{2}
}

type RecordStatus int32

const (
	RecordStatus_RECORD_OPEN      RecordStatus = 0
	RecordStatus_RECORD_SIGNED    RecordStatus = 1
	RecordStatus_RECORD_WITHDRAWN RecordStatus = 2
	RecordStatus_RECORD_REJECTED  RecordStatus = 3
	RecordStatus_RECORD_SEALED    RecordStatus = 4
)

var RecordStatus_name = map[int32]string{
	0: "RECORD_OPEN",
	1: "RECORD_SIGNED",
	2: "RECORD_WITHDRAWN",
	3: "RECORD_REJECTED",
	4: "RECORD_SEALED",
}

var RecordStatus_value = map[string]int32{
	"RECORD_OPEN":      0,
	"RECORD_SIGNED":    1,
	"RECORD_WITHDRAWN": 2,
	"RECORD_REJECTED":  3,
	"RECORD_SEALED":    4,
}

func (x RecordStatus) String() string {
	return proto.EnumName(RecordStatus_name, int32(x))
}

func (RecordStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{3}
}

type Record struct {
	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Identity    string        `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Provider    string        `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Key         string        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Data        string        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Signature   string        `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	RecordType  RecordType    `protobuf:"varint,7,opt,name=recordType,proto3,enum=metabelarus.mbcorecr.crsign.RecordType" json:"recordType,omitempty"`
	Publicity   PublicityType `protobuf:"varint,8,opt,name=publicity,proto3,enum=metabelarus.mbcorecr.crsign.PublicityType" json:"publicity,omitempty"`
	Status      RecordStatus  `protobuf:"varint,9,opt,name=status,proto3,enum=metabelarus.mbcorecr.crsign.RecordStatus" json:"status,omitempty"`
	LiveTime    int32         `protobuf:"varint,10,opt,name=liveTime,proto3" json:"liveTime,omitempty"`
	CreationDt  *time.Time    `protobuf:"bytes,11,opt,name=creationDt,proto3,stdtime" json:"creationDt,omitempty"`
	SignatureDt *time.Time    `protobuf:"bytes,12,opt,name=signatureDt,proto3,stdtime" json:"signatureDt,omitempty"`
	UpdateDt    *time.Time    `protobuf:"bytes,13,opt,name=updateDt,proto3,stdtime" json:"updateDt,omitempty"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Record) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Record) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Record) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Record) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Record) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Record) GetRecordType() RecordType {
	if m != nil {
		return m.RecordType
	}
	return RecordType_IDENTITY_RECORD
}

func (m *Record) GetPublicity() PublicityType {
	if m != nil {
		return m.Publicity
	}
	return PublicityType_PRIVATE
}

func (m *Record) GetStatus() RecordStatus {
	if m != nil {
		return m.Status
	}
	return RecordStatus_RECORD_OPEN
}

func (m *Record) GetLiveTime() int32 {
	if m != nil {
		return m.LiveTime
	}
	return 0
}

func (m *Record) GetCreationDt() *time.Time {
	if m != nil {
		return m.CreationDt
	}
	return nil
}

func (m *Record) GetSignatureDt() *time.Time {
	if m != nil {
		return m.SignatureDt
	}
	return nil
}

func (m *Record) GetUpdateDt() *time.Time {
	if m != nil {
		return m.UpdateDt
	}
	return nil
}

type MsgCreateRecord struct {
	Creator    string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Provider   string        `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Key        string        `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Data       string        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Signature  string        `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	RecordType RecordType    `protobuf:"varint,6,opt,name=recordType,proto3,enum=metabelarus.mbcorecr.crsign.RecordType" json:"recordType,omitempty"`
	Publicity  PublicityType `protobuf:"varint,7,opt,name=publicity,proto3,enum=metabelarus.mbcorecr.crsign.PublicityType" json:"publicity,omitempty"`
	LiveTime   int32         `protobuf:"varint,8,opt,name=liveTime,proto3" json:"liveTime,omitempty"`
	ParentId   string        `protobuf:"bytes,9,opt,name=parentId,proto3" json:"parentId,omitempty"`
	CreationDt *time.Time    `protobuf:"bytes,10,opt,name=creationDt,proto3,stdtime" json:"creationDt,omitempty"`
}

func (m *MsgCreateRecord) Reset()         { *m = MsgCreateRecord{} }
func (m *MsgCreateRecord) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRecord) ProtoMessage()    {}
func (*MsgCreateRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{1}
}
func (m *MsgCreateRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRecord.Merge(m, src)
}
func (m *MsgCreateRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRecord proto.InternalMessageInfo

func (m *MsgCreateRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateRecord) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgCreateRecord) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgCreateRecord) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MsgCreateRecord) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *MsgCreateRecord) GetRecordType() RecordType {
	if m != nil {
		return m.RecordType
	}
	return RecordType_IDENTITY_RECORD
}

func (m *MsgCreateRecord) GetPublicity() PublicityType {
	if m != nil {
		return m.Publicity
	}
	return PublicityType_PRIVATE
}

func (m *MsgCreateRecord) GetLiveTime() int32 {
	if m != nil {
		return m.LiveTime
	}
	return 0
}

func (m *MsgCreateRecord) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *MsgCreateRecord) GetCreationDt() *time.Time {
	if m != nil {
		return m.CreationDt
	}
	return nil
}

type MsgUpdateRecord struct {
	Updater   string       `protobuf:"bytes,1,opt,name=updater,proto3" json:"updater,omitempty"`
	Id        string       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Data      string       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Signature string       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	LiveTime  int32        `protobuf:"varint,5,opt,name=liveTime,proto3" json:"liveTime,omitempty"`
	Action    RecordUpdate `protobuf:"varint,6,opt,name=action,proto3,enum=metabelarus.mbcorecr.crsign.RecordUpdate" json:"action,omitempty"`
	UpdateDt  *time.Time   `protobuf:"bytes,7,opt,name=updateDt,proto3,stdtime" json:"updateDt,omitempty"`
}

func (m *MsgUpdateRecord) Reset()         { *m = MsgUpdateRecord{} }
func (m *MsgUpdateRecord) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRecord) ProtoMessage()    {}
func (*MsgUpdateRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{2}
}
func (m *MsgUpdateRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRecord.Merge(m, src)
}
func (m *MsgUpdateRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRecord proto.InternalMessageInfo

func (m *MsgUpdateRecord) GetUpdater() string {
	if m != nil {
		return m.Updater
	}
	return ""
}

func (m *MsgUpdateRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgUpdateRecord) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MsgUpdateRecord) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *MsgUpdateRecord) GetLiveTime() int32 {
	if m != nil {
		return m.LiveTime
	}
	return 0
}

func (m *MsgUpdateRecord) GetAction() RecordUpdate {
	if m != nil {
		return m.Action
	}
	return RecordUpdate_RECORD_UPDATE_SIGN
}

func (m *MsgUpdateRecord) GetUpdateDt() *time.Time {
	if m != nil {
		return m.UpdateDt
	}
	return nil
}

type MsgDeleteRecord struct {
	Deleter    string     `protobuf:"bytes,1,opt,name=deleter,proto3" json:"deleter,omitempty"`
	Id         string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	DeletionDt *time.Time `protobuf:"bytes,3,opt,name=deletionDt,proto3,stdtime" json:"deletionDt,omitempty"`
}

func (m *MsgDeleteRecord) Reset()         { *m = MsgDeleteRecord{} }
func (m *MsgDeleteRecord) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRecord) ProtoMessage()    {}
func (*MsgDeleteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{3}
}
func (m *MsgDeleteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRecord.Merge(m, src)
}
func (m *MsgDeleteRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRecord proto.InternalMessageInfo

func (m *MsgDeleteRecord) GetDeleter() string {
	if m != nil {
		return m.Deleter
	}
	return ""
}

func (m *MsgDeleteRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgDeleteRecord) GetDeletionDt() *time.Time {
	if m != nil {
		return m.DeletionDt
	}
	return nil
}

type Id2Record struct {
	Records []string `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *Id2Record) Reset()         { *m = Id2Record{} }
func (m *Id2Record) String() string { return proto.CompactTextString(m) }
func (*Id2Record) ProtoMessage()    {}
func (*Id2Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4427976c2c647fa, []int{4}
}
func (m *Id2Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Id2Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Id2Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Id2Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id2Record.Merge(m, src)
}
func (m *Id2Record) XXX_Size() int {
	return m.Size()
}
func (m *Id2Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Id2Record.DiscardUnknown(m)
}

var xxx_messageInfo_Id2Record proto.InternalMessageInfo

func (m *Id2Record) GetRecords() []string {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterEnum("metabelarus.mbcorecr.crsign.RecordType", RecordType_name, RecordType_value)
	proto.RegisterEnum("metabelarus.mbcorecr.crsign.RecordUpdate", RecordUpdate_name, RecordUpdate_value)
	proto.RegisterEnum("metabelarus.mbcorecr.crsign.PublicityType", PublicityType_name, PublicityType_value)
	proto.RegisterEnum("metabelarus.mbcorecr.crsign.RecordStatus", RecordStatus_name, RecordStatus_value)
	proto.RegisterType((*Record)(nil), "metabelarus.mbcorecr.crsign.Record")
	proto.RegisterType((*MsgCreateRecord)(nil), "metabelarus.mbcorecr.crsign.MsgCreateRecord")
	proto.RegisterType((*MsgUpdateRecord)(nil), "metabelarus.mbcorecr.crsign.MsgUpdateRecord")
	proto.RegisterType((*MsgDeleteRecord)(nil), "metabelarus.mbcorecr.crsign.MsgDeleteRecord")
	proto.RegisterType((*Id2Record)(nil), "metabelarus.mbcorecr.crsign.Id2Record")
}

func init() { proto.RegisterFile("crsign/record.proto", fileDescriptor_a4427976c2c647fa) }

var fileDescriptor_a4427976c2c647fa = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0x45, 0x4a, 0xb2, 0x46, 0x71, 0xcc, 0xae, 0x8d, 0x94, 0x55, 0x53, 0x45, 0x30, 0x50,
	0xd4, 0xf5, 0x81, 0x02, 0xdc, 0x43, 0x2f, 0x3d, 0x84, 0x12, 0x17, 0x31, 0x0b, 0x99, 0x12, 0x56,
	0x54, 0xd2, 0xf4, 0x12, 0x50, 0xe2, 0x56, 0x25, 0x2a, 0x99, 0x02, 0xb9, 0x0a, 0xea, 0x43, 0x7f,
	0xa0, 0xa7, 0x1c, 0xfb, 0x3b, 0x05, 0x7a, 0x28, 0x7a, 0xca, 0xb1, 0xb7, 0x16, 0xf6, 0x8f, 0x14,
	0xbb, 0x5c, 0x52, 0x94, 0x9c, 0x18, 0x32, 0x9a, 0x1b, 0x67, 0xde, 0xce, 0xdb, 0x99, 0x79, 0x6f,
	0x65, 0xc3, 0xe1, 0x34, 0x4e, 0xc2, 0xd9, 0x65, 0x27, 0xa6, 0xd3, 0x28, 0x0e, 0xcc, 0x65, 0x1c,
	0xb1, 0x08, 0x7d, 0xba, 0xa0, 0xcc, 0x9f, 0xd0, 0xb9, 0x1f, 0xaf, 0x12, 0x73, 0x31, 0x99, 0x46,
	0x31, 0x9d, 0xc6, 0x66, 0x7a, 0xb2, 0x79, 0x34, 0x8b, 0x66, 0x91, 0x38, 0xd7, 0xe1, 0x5f, 0x69,
	0x49, 0xf3, 0xc9, 0x2c, 0x8a, 0x66, 0x73, 0xda, 0x11, 0xd1, 0x64, 0xf5, 0x43, 0x87, 0x85, 0x0b,
	0x9a, 0x30, 0x7f, 0xb1, 0x4c, 0x0f, 0x1c, 0xff, 0xa5, 0x41, 0x95, 0x88, 0x4b, 0xd0, 0x43, 0x28,
	0x87, 0x81, 0xa1, 0xb4, 0x95, 0x93, 0x3a, 0x29, 0x87, 0x01, 0x6a, 0xc2, 0x5e, 0x18, 0xd0, 0x4b,
	0x16, 0xb2, 0x2b, 0xa3, 0x2c, 0xb2, 0x79, 0xcc, 0xb1, 0x65, 0x1c, 0xbd, 0x0e, 0x03, 0x1a, 0x1b,
	0x6a, 0x8a, 0x65, 0x31, 0xd2, 0x41, 0xfd, 0x89, 0x5e, 0x19, 0x9a, 0x48, 0xf3, 0x4f, 0x84, 0x40,
	0x0b, 0x7c, 0xe6, 0x1b, 0x15, 0x91, 0x12, 0xdf, 0xe8, 0x31, 0xd4, 0x79, 0xdf, 0x3e, 0x5b, 0xc5,
	0xd4, 0xa8, 0x0a, 0x60, 0x9d, 0x40, 0xcf, 0x00, 0xd2, 0xd1, 0xbd, 0xab, 0x25, 0x35, 0x6a, 0x6d,
	0xe5, 0xe4, 0xe1, 0xd9, 0x17, 0xe6, 0x1d, 0xf3, 0x9b, 0x24, 0x3f, 0x4e, 0x0a, 0xa5, 0xe8, 0x1c,
	0xea, 0xcb, 0xd5, 0x64, 0x1e, 0x4e, 0xf9, 0x14, 0x7b, 0x82, 0xe7, 0xf4, 0x4e, 0x9e, 0x61, 0x76,
	0x5a, 0x50, 0xad, 0x8b, 0x91, 0x05, 0xd5, 0x84, 0xf9, 0x6c, 0x95, 0x18, 0x75, 0x41, 0xf3, 0xe5,
	0x0e, 0xed, 0x8c, 0x44, 0x01, 0x91, 0x85, 0x7c, 0x6b, 0xf3, 0xf0, 0x35, 0xf5, 0xc2, 0x05, 0x35,
	0xa0, 0xad, 0x9c, 0x54, 0x48, 0x1e, 0xa3, 0xa7, 0x00, 0xd3, 0x98, 0xfa, 0x2c, 0x8c, 0x2e, 0x6d,
	0x66, 0x34, 0xda, 0xca, 0x49, 0xe3, 0xac, 0x69, 0xa6, 0xf2, 0x99, 0x99, 0x7c, 0xa6, 0x97, 0xc9,
	0xd7, 0xd5, 0xde, 0xfc, 0xf3, 0x44, 0x21, 0x85, 0x1a, 0xd4, 0x85, 0x46, 0xbe, 0x40, 0x9b, 0x19,
	0x0f, 0x76, 0xa4, 0x28, 0x16, 0xa1, 0x6f, 0x60, 0x6f, 0xb5, 0x0c, 0x7c, 0xc6, 0x09, 0xf6, 0x77,
	0x24, 0xc8, 0x2b, 0x8e, 0x7f, 0x53, 0xe1, 0xe0, 0x22, 0x99, 0xf5, 0x78, 0x4f, 0x54, 0xba, 0xca,
	0x80, 0x9a, 0xe8, 0x31, 0x8a, 0xa5, 0xb5, 0xb2, 0x70, 0xc3, 0x43, 0xe5, 0x77, 0x7b, 0x48, 0xbd,
	0xed, 0x21, 0xed, 0x7d, 0x1e, 0xaa, 0xdc, 0xed, 0xa1, 0xea, 0x07, 0xf2, 0x50, 0xed, 0xff, 0x78,
	0xa8, 0x68, 0x80, 0xbd, 0x2d, 0x03, 0xf0, 0x75, 0xf8, 0x31, 0xbd, 0x64, 0x4e, 0x20, 0x1c, 0xc6,
	0xd7, 0x21, 0xe3, 0x2d, 0x73, 0xc0, 0xfd, 0xcd, 0x71, 0xfc, 0x6b, 0x59, 0x48, 0x33, 0x16, 0x52,
	0xad, 0xa5, 0x49, 0xa5, 0xcb, 0xa5, 0x91, 0xa1, 0xfc, 0x29, 0x28, 0xe7, 0x3f, 0x05, 0xd9, 0xf2,
	0xd5, 0xf7, 0x2d, 0x5f, 0xdb, 0x5e, 0x7e, 0x71, 0xd2, 0xca, 0xd6, 0xa4, 0x16, 0x54, 0xfd, 0x29,
	0xef, 0x4b, 0x8a, 0xb2, 0xcb, 0x4b, 0x92, 0x8d, 0xcb, 0xc2, 0x0d, 0x9f, 0xd6, 0xee, 0xed, 0xd3,
	0x5f, 0xc4, 0x2e, 0x6c, 0x3a, 0xa7, 0xc5, 0x5d, 0x04, 0x22, 0xce, 0x77, 0x21, 0xc3, 0x5b, 0xbb,
	0x78, 0x0a, 0x20, 0xa0, 0x54, 0x0b, 0x75, 0x57, 0x2d, 0xd6, 0x35, 0xc7, 0x9f, 0x43, 0xdd, 0x09,
	0xce, 0xd6, 0x17, 0xa7, 0x56, 0x4b, 0x0c, 0xa5, 0xad, 0xf2, 0x8b, 0x65, 0x78, 0xfa, 0x87, 0x02,
	0xb0, 0x76, 0x24, 0x3a, 0x84, 0x03, 0xc7, 0xc6, 0xae, 0xe7, 0x78, 0x2f, 0x5f, 0x11, 0xdc, 0x1b,
	0x10, 0x5b, 0x2f, 0xa1, 0xcf, 0xe0, 0x93, 0x3c, 0x39, 0xc4, 0xe4, 0xc2, 0x72, 0xb1, 0xeb, 0x65,
	0xb0, 0x82, 0x9a, 0xf0, 0x28, 0x87, 0x2f, 0xc6, 0xde, 0xd8, 0xea, 0x67, 0x58, 0x99, 0xf3, 0x0d,
	0xc9, 0xe0, 0xb9, 0x63, 0x63, 0x92, 0x25, 0x55, 0xf4, 0x18, 0x8c, 0x3c, 0x39, 0x72, 0x9e, 0xb9,
	0x56, 0xb7, 0x8f, 0x33, 0x54, 0xe3, 0x74, 0x39, 0xba, 0x49, 0x57, 0x41, 0x1f, 0xc3, 0x61, 0x8e,
	0xf1, 0x4e, 0x9c, 0xd1, 0xc8, 0x19, 0xb8, 0x7a, 0xf5, 0xf4, 0x77, 0x05, 0x1e, 0x14, 0x35, 0x44,
	0x8f, 0x00, 0xa5, 0x55, 0xaf, 0xc6, 0x43, 0xdb, 0xf2, 0xb0, 0xb8, 0x48, 0x2f, 0x71, 0x86, 0xad,
	0xbc, 0x37, 0x20, 0x58, 0x57, 0x90, 0x01, 0x47, 0x04, 0x0f, 0x7a, 0x6b, 0x00, 0x7f, 0xe7, 0x61,
	0x97, 0xcf, 0x70, 0x0b, 0x21, 0xf8, 0x5b, 0xdc, 0xf3, 0x74, 0x95, 0xb7, 0xba, 0x89, 0xbc, 0x70,
	0xbc, 0x73, 0x9b, 0x58, 0x2f, 0x74, 0x2d, 0x6d, 0xa0, 0x88, 0x8d, 0xb0, 0xd5, 0xd7, 0x2b, 0xef,
	0x62, 0x1b, 0x0c, 0x31, 0x9f, 0xe1, 0x6b, 0xd8, 0xdf, 0x78, 0xd3, 0xa8, 0x01, 0xb5, 0x21, 0x71,
	0x9e, 0x5b, 0x1e, 0xd6, 0x4b, 0x08, 0xa0, 0x3a, 0x1c, 0x77, 0xfb, 0x4e, 0x4f, 0x57, 0xd0, 0x3e,
	0xd4, 0x2d, 0x77, 0xe0, 0xbe, 0xbc, 0x18, 0x8c, 0x47, 0x7a, 0xf9, 0x74, 0x99, 0xcd, 0x9e, 0xfe,
	0x25, 0x40, 0x07, 0xd0, 0x90, 0x33, 0x0a, 0xe6, 0x12, 0xfa, 0x08, 0xf6, 0x65, 0x82, 0x6f, 0x01,
	0x73, 0xd1, 0x8e, 0x40, 0x97, 0xa9, 0xac, 0x67, 0x37, 0x95, 0x4b, 0x66, 0xd3, 0x19, 0x31, 0x97,
	0xab, 0x50, 0x8d, 0xad, 0x3e, 0xb6, 0x75, 0xad, 0x7b, 0xfe, 0xe7, 0x75, 0x4b, 0x79, 0x7b, 0xdd,
	0x52, 0xfe, 0xbd, 0x6e, 0x29, 0x6f, 0x6e, 0x5a, 0xa5, 0xb7, 0x37, 0xad, 0xd2, 0xdf, 0x37, 0xad,
	0xd2, 0xf7, 0xe6, 0x2c, 0x64, 0x3f, 0xae, 0x26, 0xe6, 0x34, 0x5a, 0x74, 0x0a, 0x0f, 0xae, 0x93,
	0x3d, 0xb8, 0xce, 0xcf, 0x1d, 0xf9, 0x5f, 0x07, 0xbb, 0x5a, 0xd2, 0x64, 0x52, 0x15, 0x66, 0xfe,
	0xea, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0x24, 0xe3, 0xa2, 0x8c, 0x08, 0x00, 0x00,
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateDt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdateDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdateDt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintRecord(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x6a
	}
	if m.SignatureDt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.SignatureDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.SignatureDt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintRecord(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x62
	}
	if m.CreationDt != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreationDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationDt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintRecord(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x5a
	}
	if m.LiveTime != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.LiveTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.Publicity != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.Publicity))
		i--
		dAtA[i] = 0x40
	}
	if m.RecordType != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.RecordType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDt != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreationDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationDt):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintRecord(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LiveTime != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.LiveTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Publicity != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.Publicity))
		i--
		dAtA[i] = 0x38
	}
	if m.RecordType != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.RecordType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateDt != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdateDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdateDt):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintRecord(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x3a
	}
	if m.Action != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x30
	}
	if m.LiveTime != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.LiveTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Updater) > 0 {
		i -= len(m.Updater)
		copy(dAtA[i:], m.Updater)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Updater)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletionDt != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletionDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletionDt):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintRecord(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deleter) > 0 {
		i -= len(m.Deleter)
		copy(dAtA[i:], m.Deleter)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Deleter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Id2Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Id2Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Id2Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Records[iNdEx])
			copy(dAtA[i:], m.Records[iNdEx])
			i = encodeVarintRecord(dAtA, i, uint64(len(m.Records[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.RecordType != 0 {
		n += 1 + sovRecord(uint64(m.RecordType))
	}
	if m.Publicity != 0 {
		n += 1 + sovRecord(uint64(m.Publicity))
	}
	if m.Status != 0 {
		n += 1 + sovRecord(uint64(m.Status))
	}
	if m.LiveTime != 0 {
		n += 1 + sovRecord(uint64(m.LiveTime))
	}
	if m.CreationDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationDt)
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.SignatureDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.SignatureDt)
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.UpdateDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdateDt)
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *MsgCreateRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.RecordType != 0 {
		n += 1 + sovRecord(uint64(m.RecordType))
	}
	if m.Publicity != 0 {
		n += 1 + sovRecord(uint64(m.Publicity))
	}
	if m.LiveTime != 0 {
		n += 1 + sovRecord(uint64(m.LiveTime))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.CreationDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationDt)
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *MsgUpdateRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updater)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.LiveTime != 0 {
		n += 1 + sovRecord(uint64(m.LiveTime))
	}
	if m.Action != 0 {
		n += 1 + sovRecord(uint64(m.Action))
	}
	if m.UpdateDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdateDt)
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *MsgDeleteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deleter)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.DeletionDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletionDt)
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *Id2Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, s := range m.Records {
			l = len(s)
			n += 1 + l + sovRecord(uint64(l))
		}
	}
	return n
}

func sovRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecord(x uint64) (n int) {
	return sovRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordType", wireType)
			}
			m.RecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordType |= RecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publicity", wireType)
			}
			m.Publicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Publicity |= PublicityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RecordStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			m.LiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationDt == nil {
				m.CreationDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreationDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureDt == nil {
				m.SignatureDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.SignatureDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateDt == nil {
				m.UpdateDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdateDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordType", wireType)
			}
			m.RecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordType |= RecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publicity", wireType)
			}
			m.Publicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Publicity |= PublicityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			m.LiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationDt == nil {
				m.CreationDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreationDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updater", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updater = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			m.LiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= RecordUpdate(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateDt == nil {
				m.UpdateDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdateDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deleter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletionDt == nil {
				m.DeletionDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletionDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Id2Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id2Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id2Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecord = fmt.Errorf("proto: unexpected end of group")
)

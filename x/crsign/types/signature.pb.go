// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crsign/signature.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignatureType int32

const (
	SignatureType_SIGN       SignatureType = 0
	SignatureType_PERMISSION SignatureType = 1
	SignatureType_BADGE      SignatureType = 2
)

var SignatureType_name = map[int32]string{
	0: "SIGN",
	1: "PERMISSION",
	2: "BADGE",
}

var SignatureType_value = map[string]int32{
	"SIGN":       0,
	"PERMISSION": 1,
	"BADGE":      2,
}

func (x SignatureType) String() string {
	return proto.EnumName(SignatureType_name, int32(x))
}

func (SignatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac4583a87fc195f5, []int{0}
}

type PublicityType int32

const (
	PublicityType_SECRET    PublicityType = 0
	PublicityType_PUBLIC    PublicityType = 1
	PublicityType_ANONYMOUS PublicityType = 2
	PublicityType_HASH      PublicityType = 3
)

var PublicityType_name = map[int32]string{
	0: "SECRET",
	1: "PUBLIC",
	2: "ANONYMOUS",
	3: "HASH",
}

var PublicityType_value = map[string]int32{
	"SECRET":    0,
	"PUBLIC":    1,
	"ANONYMOUS": 2,
	"HASH":      3,
}

func (x PublicityType) String() string {
	return proto.EnumName(PublicityType_name, int32(x))
}

func (PublicityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac4583a87fc195f5, []int{1}
}

type SignatureStatus int32

const (
	SignatureStatus_SIG_OPEN      SignatureStatus = 0
	SignatureStatus_SIG_SIGNED    SignatureStatus = 1
	SignatureStatus_SIG_WITHDRAWN SignatureStatus = 2
	SignatureStatus_SIG_REJECTED  SignatureStatus = 3
	SignatureStatus_SIG_SEALED    SignatureStatus = 4
)

var SignatureStatus_name = map[int32]string{
	0: "SIG_OPEN",
	1: "SIG_SIGNED",
	2: "SIG_WITHDRAWN",
	3: "SIG_REJECTED",
	4: "SIG_SEALED",
}

var SignatureStatus_value = map[string]int32{
	"SIG_OPEN":      0,
	"SIG_SIGNED":    1,
	"SIG_WITHDRAWN": 2,
	"SIG_REJECTED":  3,
	"SIG_SEALED":    4,
}

func (x SignatureStatus) String() string {
	return proto.EnumName(SignatureStatus_name, int32(x))
}

func (SignatureStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac4583a87fc195f5, []int{2}
}

type Signature struct {
	Id                 string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Identity           string          `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Service            string          `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	PrivateBox         string          `protobuf:"bytes,5,opt,name=privateBox,proto3" json:"privateBox,omitempty"`
	ServiceSign        string          `protobuf:"bytes,6,opt,name=serviceSign,proto3" json:"serviceSign,omitempty"`
	IdentitySign       string          `protobuf:"bytes,7,opt,name=identitySign,proto3" json:"identitySign,omitempty"`
	PublicBox          string          `protobuf:"bytes,8,opt,name=publicBox,proto3" json:"publicBox,omitempty"`
	IdentityPublicSign string          `protobuf:"bytes,9,opt,name=identityPublicSign,proto3" json:"identityPublicSign,omitempty"`
	ServicePublicSign  string          `protobuf:"bytes,10,opt,name=servicePublicSign,proto3" json:"servicePublicSign,omitempty"`
	Purpose            string          `protobuf:"bytes,11,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Type               SignatureType   `protobuf:"varint,12,opt,name=type,proto3,enum=metabelarus.mbcorecr.crsign.SignatureType" json:"type,omitempty"`
	Publicity          PublicityType   `protobuf:"varint,13,opt,name=publicity,proto3,enum=metabelarus.mbcorecr.crsign.PublicityType" json:"publicity,omitempty"`
	Status             SignatureStatus `protobuf:"varint,14,opt,name=status,proto3,enum=metabelarus.mbcorecr.crsign.SignatureStatus" json:"status,omitempty"`
	CreationDt         *time.Time      `protobuf:"bytes,15,opt,name=creationDt,proto3,stdtime" json:"creationDt,omitempty"`
	SignatureDt        *time.Time      `protobuf:"bytes,16,opt,name=signatureDt,proto3,stdtime" json:"signatureDt,omitempty"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac4583a87fc195f5, []int{0}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Signature) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Signature) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Signature) GetPrivateBox() string {
	if m != nil {
		return m.PrivateBox
	}
	return ""
}

func (m *Signature) GetServiceSign() string {
	if m != nil {
		return m.ServiceSign
	}
	return ""
}

func (m *Signature) GetIdentitySign() string {
	if m != nil {
		return m.IdentitySign
	}
	return ""
}

func (m *Signature) GetPublicBox() string {
	if m != nil {
		return m.PublicBox
	}
	return ""
}

func (m *Signature) GetIdentityPublicSign() string {
	if m != nil {
		return m.IdentityPublicSign
	}
	return ""
}

func (m *Signature) GetServicePublicSign() string {
	if m != nil {
		return m.ServicePublicSign
	}
	return ""
}

func (m *Signature) GetPurpose() string {
	if m != nil {
		return m.Purpose
	}
	return ""
}

func (m *Signature) GetType() SignatureType {
	if m != nil {
		return m.Type
	}
	return SignatureType_SIGN
}

func (m *Signature) GetPublicity() PublicityType {
	if m != nil {
		return m.Publicity
	}
	return PublicityType_SECRET
}

func (m *Signature) GetStatus() SignatureStatus {
	if m != nil {
		return m.Status
	}
	return SignatureStatus_SIG_OPEN
}

func (m *Signature) GetCreationDt() *time.Time {
	if m != nil {
		return m.CreationDt
	}
	return nil
}

func (m *Signature) GetSignatureDt() *time.Time {
	if m != nil {
		return m.SignatureDt
	}
	return nil
}

type MsgCreateSignature struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Identity       string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Service        string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Key            string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Secret         string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	CreationDt     string `protobuf:"bytes,6,opt,name=creationDt,proto3" json:"creationDt,omitempty"`
	AvailabilityDt string `protobuf:"bytes,7,opt,name=availabilityDt,proto3" json:"availabilityDt,omitempty"`
}

func (m *MsgCreateSignature) Reset()         { *m = MsgCreateSignature{} }
func (m *MsgCreateSignature) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSignature) ProtoMessage()    {}
func (*MsgCreateSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac4583a87fc195f5, []int{1}
}
func (m *MsgCreateSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSignature.Merge(m, src)
}
func (m *MsgCreateSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSignature proto.InternalMessageInfo

func (m *MsgCreateSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSignature) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *MsgCreateSignature) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MsgCreateSignature) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgCreateSignature) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *MsgCreateSignature) GetCreationDt() string {
	if m != nil {
		return m.CreationDt
	}
	return ""
}

func (m *MsgCreateSignature) GetAvailabilityDt() string {
	if m != nil {
		return m.AvailabilityDt
	}
	return ""
}

type MsgUpdateSignature struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Identity       string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Service        string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Key            string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Secret         string `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty"`
	CreationDt     string `protobuf:"bytes,7,opt,name=creationDt,proto3" json:"creationDt,omitempty"`
	AvailabilityDt string `protobuf:"bytes,8,opt,name=availabilityDt,proto3" json:"availabilityDt,omitempty"`
}

func (m *MsgUpdateSignature) Reset()         { *m = MsgUpdateSignature{} }
func (m *MsgUpdateSignature) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSignature) ProtoMessage()    {}
func (*MsgUpdateSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac4583a87fc195f5, []int{2}
}
func (m *MsgUpdateSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSignature.Merge(m, src)
}
func (m *MsgUpdateSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSignature proto.InternalMessageInfo

func (m *MsgUpdateSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateSignature) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgUpdateSignature) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *MsgUpdateSignature) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MsgUpdateSignature) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgUpdateSignature) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *MsgUpdateSignature) GetCreationDt() string {
	if m != nil {
		return m.CreationDt
	}
	return ""
}

func (m *MsgUpdateSignature) GetAvailabilityDt() string {
	if m != nil {
		return m.AvailabilityDt
	}
	return ""
}

type MsgDeleteSignature struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteSignature) Reset()         { *m = MsgDeleteSignature{} }
func (m *MsgDeleteSignature) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSignature) ProtoMessage()    {}
func (*MsgDeleteSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac4583a87fc195f5, []int{3}
}
func (m *MsgDeleteSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSignature.Merge(m, src)
}
func (m *MsgDeleteSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSignature proto.InternalMessageInfo

func (m *MsgDeleteSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteSignature) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("metabelarus.mbcorecr.crsign.SignatureType", SignatureType_name, SignatureType_value)
	proto.RegisterEnum("metabelarus.mbcorecr.crsign.PublicityType", PublicityType_name, PublicityType_value)
	proto.RegisterEnum("metabelarus.mbcorecr.crsign.SignatureStatus", SignatureStatus_name, SignatureStatus_value)
	proto.RegisterType((*Signature)(nil), "metabelarus.mbcorecr.crsign.Signature")
	proto.RegisterType((*MsgCreateSignature)(nil), "metabelarus.mbcorecr.crsign.MsgCreateSignature")
	proto.RegisterType((*MsgUpdateSignature)(nil), "metabelarus.mbcorecr.crsign.MsgUpdateSignature")
	proto.RegisterType((*MsgDeleteSignature)(nil), "metabelarus.mbcorecr.crsign.MsgDeleteSignature")
}

func init() { proto.RegisterFile("crsign/signature.proto", fileDescriptor_ac4583a87fc195f5) }

var fileDescriptor_ac4583a87fc195f5 = []byte{
	// 707 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xda, 0x4a,
	0x14, 0xc6, 0xfc, 0x73, 0xf8, 0xc9, 0x64, 0x74, 0x15, 0x59, 0xdc, 0x2b, 0x82, 0x58, 0x5c, 0x45,
	0x28, 0xb2, 0xa5, 0xdc, 0xbb, 0x8e, 0x02, 0xd8, 0x0a, 0x54, 0x09, 0x20, 0x9b, 0x28, 0x6a, 0x37,
	0x95, 0x31, 0x53, 0x3a, 0x2a, 0xc4, 0x96, 0x3d, 0x8e, 0xc2, 0x5b, 0xe4, 0x1d, 0xfa, 0x32, 0x5d,
	0x66, 0x55, 0x75, 0xd7, 0x2a, 0x91, 0xfa, 0x1c, 0xd5, 0x8c, 0x6d, 0xe2, 0xa4, 0x34, 0x42, 0xd9,
	0xa0, 0x39, 0xdf, 0xf9, 0xce, 0x39, 0xf3, 0x0d, 0xdf, 0x01, 0xd8, 0xb3, 0x3d, 0x9f, 0xce, 0xaf,
	0x54, 0xfe, 0x61, 0xb1, 0xc0, 0x23, 0x8a, 0xeb, 0x39, 0xcc, 0xc1, 0x7f, 0x2f, 0x09, 0xb3, 0xa6,
	0x64, 0x61, 0x79, 0x81, 0xaf, 0x2c, 0xa7, 0xb6, 0xe3, 0x11, 0xdb, 0x53, 0x42, 0x72, 0xfd, 0xaf,
	0xb9, 0x33, 0x77, 0x04, 0x4f, 0xe5, 0xa7, 0xb0, 0xa4, 0xbe, 0x3f, 0x77, 0x9c, 0xf9, 0x82, 0xa8,
	0x22, 0x9a, 0x06, 0x1f, 0x54, 0x46, 0x97, 0xc4, 0x67, 0xd6, 0xd2, 0x0d, 0x09, 0xad, 0xcf, 0x39,
	0x28, 0x99, 0xf1, 0x1c, 0x5c, 0x83, 0x34, 0x9d, 0xc9, 0x52, 0x53, 0x3a, 0x28, 0x19, 0x69, 0x3a,
	0xc3, 0x75, 0x28, 0xd2, 0x19, 0xb9, 0x62, 0x94, 0xad, 0xe4, 0xb4, 0x40, 0xd7, 0x31, 0x96, 0xa1,
	0xe0, 0x13, 0xef, 0x9a, 0xda, 0x44, 0xce, 0x88, 0x54, 0x1c, 0xe2, 0x06, 0x80, 0xeb, 0xd1, 0x6b,
	0x8b, 0x91, 0xae, 0x73, 0x23, 0xe7, 0x44, 0x32, 0x81, 0xe0, 0x26, 0x94, 0x23, 0x2a, 0x9f, 0x2c,
	0xe7, 0x05, 0x21, 0x09, 0xe1, 0x16, 0x54, 0xe2, 0x39, 0x82, 0x52, 0x10, 0x94, 0x27, 0x18, 0xfe,
	0x07, 0x4a, 0x6e, 0x30, 0x5d, 0x50, 0x9b, 0x0f, 0x29, 0x0a, 0xc2, 0x23, 0x80, 0x15, 0xc0, 0x31,
	0x7b, 0x2c, 0x40, 0xd1, 0xa7, 0x24, 0x68, 0x1b, 0x32, 0xf8, 0x10, 0x76, 0xa3, 0x0b, 0x24, 0xe8,
	0x20, 0xe8, 0xbf, 0x27, 0xb8, 0x76, 0x37, 0xf0, 0x5c, 0xc7, 0x27, 0x72, 0x39, 0xd4, 0x1e, 0x85,
	0xf8, 0x18, 0xb2, 0x6c, 0xe5, 0x12, 0xb9, 0xd2, 0x94, 0x0e, 0x6a, 0x47, 0x6d, 0xe5, 0x85, 0xaf,
	0x4c, 0x59, 0xbf, 0xfb, 0x64, 0xe5, 0x12, 0x43, 0xd4, 0xe1, 0x7e, 0xac, 0x8a, 0x3f, 0x79, 0x75,
	0x8b, 0x26, 0xe3, 0x98, 0x2d, 0x9a, 0x3c, 0x16, 0x63, 0x0d, 0xf2, 0x3e, 0xb3, 0x58, 0xe0, 0xcb,
	0x35, 0xd1, 0xe6, 0x70, 0xbb, 0xbb, 0x98, 0xa2, 0xc6, 0x88, 0x6a, 0xf1, 0x09, 0x80, 0xed, 0x11,
	0x8b, 0x51, 0xe7, 0x4a, 0x63, 0xf2, 0x4e, 0x53, 0x3a, 0x28, 0x1f, 0xd5, 0x95, 0xd0, 0x55, 0x4a,
	0xec, 0x2a, 0x65, 0x12, 0xbb, 0xaa, 0x9b, 0xbd, 0xfd, 0xbe, 0x2f, 0x19, 0x89, 0x1a, 0xdc, 0x85,
	0xf2, 0xda, 0xc8, 0x1a, 0x93, 0xd1, 0x96, 0x2d, 0x92, 0x45, 0xad, 0xaf, 0x12, 0xe0, 0x73, 0x7f,
	0xde, 0xe3, 0x5d, 0xc9, 0xa3, 0x5d, 0x65, 0x28, 0x88, 0x41, 0x8e, 0x17, 0x79, 0x36, 0x0e, 0x5f,
	0x69, 0x5c, 0x04, 0x99, 0x4f, 0x64, 0x25, 0x67, 0x05, 0xca, 0x8f, 0x78, 0x0f, 0xf2, 0x3e, 0xb1,
	0x3d, 0xc2, 0x22, 0x1b, 0x47, 0x11, 0xb7, 0x78, 0xe2, 0x59, 0x42, 0x07, 0x27, 0x45, 0xff, 0x0b,
	0x35, 0xeb, 0xda, 0xa2, 0x0b, 0x6b, 0x4a, 0x17, 0x94, 0xad, 0x34, 0x16, 0x59, 0xf8, 0x19, 0xda,
	0xfa, 0x19, 0x0a, 0xbb, 0x70, 0x67, 0x5b, 0x0a, 0x0b, 0x37, 0x34, 0xbd, 0x71, 0x43, 0x33, 0x7f,
	0x16, 0x9a, 0xdd, 0x28, 0x34, 0xb7, 0x49, 0x68, 0xfe, 0x05, 0xa1, 0x85, 0x2d, 0x84, 0x16, 0x37,
	0x0a, 0x3d, 0x16, 0x3a, 0x35, 0xb2, 0x20, 0xaf, 0xd2, 0xd9, 0xfe, 0x1f, 0xaa, 0x4f, 0xd6, 0x05,
	0x17, 0x21, 0x6b, 0x0e, 0x4e, 0x87, 0x28, 0x85, 0x6b, 0x00, 0x63, 0xdd, 0x38, 0x1f, 0x98, 0xe6,
	0x60, 0x34, 0x44, 0x12, 0x2e, 0x41, 0xae, 0xdb, 0xd1, 0x4e, 0x75, 0x94, 0x6e, 0x9f, 0x40, 0xf5,
	0xc9, 0x7e, 0x60, 0x80, 0xbc, 0xa9, 0xf7, 0x0c, 0x7d, 0x82, 0x52, 0xfc, 0x3c, 0xbe, 0xe8, 0x9e,
	0x0d, 0x7a, 0x48, 0xc2, 0x55, 0x28, 0x75, 0x86, 0xa3, 0xe1, 0xdb, 0xf3, 0xd1, 0x85, 0x89, 0xd2,
	0xbc, 0x79, 0xbf, 0x63, 0xf6, 0x51, 0xa6, 0x3d, 0x83, 0x9d, 0x67, 0xab, 0x81, 0x2b, 0x50, 0x34,
	0x07, 0xa7, 0xef, 0x47, 0x63, 0x3d, 0x9a, 0xce, 0x23, 0x7e, 0x17, 0x5d, 0x43, 0x12, 0xde, 0x85,
	0x2a, 0x8f, 0x2f, 0x07, 0x93, 0xbe, 0x66, 0x74, 0x2e, 0x87, 0x28, 0x8d, 0x11, 0x54, 0x38, 0x64,
	0xe8, 0x6f, 0xf4, 0xde, 0x44, 0xd7, 0x50, 0x66, 0x5d, 0xa4, 0x77, 0xce, 0x74, 0x0d, 0x65, 0xbb,
	0xfd, 0x2f, 0xf7, 0x0d, 0xe9, 0xee, 0xbe, 0x21, 0xfd, 0xb8, 0x6f, 0x48, 0xb7, 0x0f, 0x8d, 0xd4,
	0xdd, 0x43, 0x23, 0xf5, 0xed, 0xa1, 0x91, 0x7a, 0xa7, 0xcc, 0x29, 0xfb, 0x18, 0x4c, 0x15, 0xdb,
	0x59, 0xaa, 0x89, 0xfd, 0x55, 0xe3, 0xfd, 0x55, 0x6f, 0xd4, 0xe8, 0xdf, 0x82, 0xff, 0x7c, 0xf8,
	0xd3, 0xbc, 0x58, 0xa8, 0xff, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xe4, 0x80, 0xf0, 0x44,
	0x06, 0x00, 0x00,
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignatureDt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.SignatureDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.SignatureDt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintSignature(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CreationDt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreationDt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationDt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintSignature(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x7a
	}
	if m.Status != 0 {
		i = encodeVarintSignature(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if m.Publicity != 0 {
		i = encodeVarintSignature(dAtA, i, uint64(m.Publicity))
		i--
		dAtA[i] = 0x68
	}
	if m.Type != 0 {
		i = encodeVarintSignature(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Purpose) > 0 {
		i -= len(m.Purpose)
		copy(dAtA[i:], m.Purpose)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Purpose)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ServicePublicSign) > 0 {
		i -= len(m.ServicePublicSign)
		copy(dAtA[i:], m.ServicePublicSign)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.ServicePublicSign)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IdentityPublicSign) > 0 {
		i -= len(m.IdentityPublicSign)
		copy(dAtA[i:], m.IdentityPublicSign)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.IdentityPublicSign)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PublicBox) > 0 {
		i -= len(m.PublicBox)
		copy(dAtA[i:], m.PublicBox)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.PublicBox)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IdentitySign) > 0 {
		i -= len(m.IdentitySign)
		copy(dAtA[i:], m.IdentitySign)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.IdentitySign)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ServiceSign) > 0 {
		i -= len(m.ServiceSign)
		copy(dAtA[i:], m.ServiceSign)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.ServiceSign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrivateBox) > 0 {
		i -= len(m.PrivateBox)
		copy(dAtA[i:], m.PrivateBox)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.PrivateBox)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailabilityDt) > 0 {
		i -= len(m.AvailabilityDt)
		copy(dAtA[i:], m.AvailabilityDt)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.AvailabilityDt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreationDt) > 0 {
		i -= len(m.CreationDt)
		copy(dAtA[i:], m.CreationDt)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.CreationDt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailabilityDt) > 0 {
		i -= len(m.AvailabilityDt)
		copy(dAtA[i:], m.AvailabilityDt)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.AvailabilityDt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreationDt) > 0 {
		i -= len(m.CreationDt)
		copy(dAtA[i:], m.CreationDt)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.CreationDt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSignature(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignature(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignature(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.PrivateBox)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.ServiceSign)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.IdentitySign)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.PublicBox)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.IdentityPublicSign)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.ServicePublicSign)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Purpose)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSignature(uint64(m.Type))
	}
	if m.Publicity != 0 {
		n += 1 + sovSignature(uint64(m.Publicity))
	}
	if m.Status != 0 {
		n += 1 + sovSignature(uint64(m.Status))
	}
	if m.CreationDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationDt)
		n += 1 + l + sovSignature(uint64(l))
	}
	if m.SignatureDt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.SignatureDt)
		n += 2 + l + sovSignature(uint64(l))
	}
	return n
}

func (m *MsgCreateSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.CreationDt)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.AvailabilityDt)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	return n
}

func (m *MsgUpdateSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.CreationDt)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.AvailabilityDt)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	return n
}

func (m *MsgDeleteSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignature(uint64(l))
	}
	return n
}

func sovSignature(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignature(x uint64) (n int) {
	return sovSignature(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateBox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateBox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentitySign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicBox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicBox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityPublicSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityPublicSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePublicSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePublicSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purpose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SignatureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publicity", wireType)
			}
			m.Publicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Publicity |= PublicityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SignatureStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationDt == nil {
				m.CreationDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreationDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureDt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureDt == nil {
				m.SignatureDt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.SignatureDt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationDt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityDt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityDt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationDt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityDt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityDt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignature(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignature
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignature
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignature
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignature
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignature        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignature          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignature = fmt.Errorf("proto: unexpected end of group")
)
